services:
  #init-elasticsearch:
  #  image: alpine/curl:8.8.0
  #  container_name: init-elasticsearch
  #  environment:
  #    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #  volumes:
  #    - ./init_elasticsearch.sh:/init_elasticsearch.sh
  #  entrypoint: "sh init_elasticsearch.sh"
  #  depends_on:
  #    - elasticsearch
  #elasticsearch:
    #image: elasticsearch:7.17.0
    #container_name: elasticsearch
    #environment:
    #  - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    #ports:
    #  - "9200:9200"
    #volumes:
    #  - ./certs:/usr/share/elasticsearch/config/certs
  #  #  - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
  #kibana:
  #  image: kibana:7.17.0
  #  container_name: kibana
  #  environment:
  #    - KIBANA_PASSWORD=${ELASTIC_PASSWORD}
  #  ports:
  #    - "5601:5601"
  #  volumes:
  #    - ./certs:/usr/share/kibana/config/certs
  #    - ./kibana.yml:/usr/share/kibana/config/kibana.yml
  #  depends_on:
  #    - elasticsearch
  #logstash:
  #  image: logstash:7.17.0
  #  container_name: logstash
  #  volumes:
  #    - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
  #    - ./backend_logs:/var/log/backend
  #    - ./certs:/usr/share/logstash/config/certs
  #    - ./logstash.yml:/usr/share/logstash/config/logstash.yml
  #  environment:
  #    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #  depends_on:
  #    - elasticsearch
  frontend:
    #image: frontend
    container_name: frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    working_dir: /code
    restart: always
    volumes:
      - ./frontend:/code
      - ./static_volume:/code/staticfiles
    env_file:
      - .env
    depends_on:
      frontend_db:
        condition: service_healthy
    #healthcheck:
    #  test: ["CMD-SHELL", "pg_isready -U postgres"]
    #  interval: 10s
    #  timeout: 5s
    #  retries: 5


  nginx:
    image: nginx:1.19
    container_name: nginx
    ports:
      - "8005:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend:/code
      - ./certs/nginx:/etc/nginx/ssl
      - ./frontend/static:/static
    depends_on:
      - login
      - frontend

  login_db:
    image: postgres:12
    container_name: login_db
    command: ["postgres", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 30s
      retries: 10
      start_period: 2s
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    
  frontend_db:
    image: postgres:12
    command: ["postgres", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    container_name: frontend_db
    environment:
      POSTGRES_USER: $POSTGRES_USER2
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD2
      POSTGRES_DB: $POSTGRES_DB2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 30s
      retries: 10
      start_period: 2s
    volumes:
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    
  tournament_db:
    image: postgres:12
    command: ["postgres", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    container_name: tournament_db
    environment:
      POSTGRES_USER: $POSTGRES_USER3
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD3
      POSTGRES_DB: $POSTGRES_DB3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 30s
      retries: 10
      start_period: 2s
    volumes:
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    
  login:
    #image: login
    container_name: login
    build: 
      context: ./login
      dockerfile: Dockerfile
    working_dir: /code
    restart: always
    volumes:
      - ./login:/code
      - ./backend_logs:/code/logs
    env_file:
      - .env
    depends_on:
      login_db:
        condition: service_healthy
    
  tournament:
    # image: tournament
    container_name: tournament
    build: 
      context: ./tournament
      dockerfile: Dockerfile
    working_dir: /code
    restart: always
    volumes:
      - ./tournament:/code
      - ./backend_logs:/code/logs
    env_file:
      - .env
    depends_on:
      tournament_db:
        condition: service_healthy

networks:
  default:
      driver: bridge
